diff --git a/node_modules/@markdoc/markdoc/index.ts b/node_modules/@markdoc/markdoc/index.ts
index 75b1385..12ff1a8 100644
--- a/node_modules/@markdoc/markdoc/index.ts
+++ b/node_modules/@markdoc/markdoc/index.ts
@@ -93,16 +93,27 @@ export function validate<C extends Config = Config>(
   const config = mergeConfig(options);
 
   const output = [content, ...content.walk()].map((node) => {
-    const { type, lines, location } = node;
+    const { type, lines, location, range } = node as Node;
     const errors = validator(node, config);
-
     if (isPromise(errors)) {
       return errors.then((e) =>
-        e.map((error) => ({ type, lines, location, error }))
+        e.map((error) => ({
+          type,
+          lines,
+          location,
+          range: error.range || range,
+          error,
+        }))
       );
     }
 
-    return errors.map((error) => ({ type, lines, location, error }));
+    return errors.map((error) => ({
+      type,
+      lines,
+      location,
+      range: error.range || range,
+      error,
+    }));
   });
 
   if (output.some(isPromise)) {
diff --git a/node_modules/@markdoc/markdoc/src/ast/function.ts b/node_modules/@markdoc/markdoc/src/ast/function.ts
index 417b9c1..cad0742 100644
--- a/node_modules/@markdoc/markdoc/src/ast/function.ts
+++ b/node_modules/@markdoc/markdoc/src/ast/function.ts
@@ -1,15 +1,24 @@
+import type { AstType, Config } from '../types';
 import { resolve } from './base';
-import type { Config, AstType } from '../types';
 
 export default class Function implements AstType {
   readonly $$mdtype = 'Function';
 
   name;
   parameters;
+  range?;
+  ranges?;
 
-  constructor(name: string, parameters: Record<string, any>) {
+  constructor(
+    name: string,
+    parameters: Record<string, any>,
+    range?: [number, number],
+    ranges?: Record<string, any>
+  ) {
     this.name = name;
     this.parameters = parameters;
+    this.range = range;
+    this.ranges = ranges;
   }
 
   resolve(config: Config = {}) {
diff --git a/node_modules/@markdoc/markdoc/src/ast/node.ts b/node_modules/@markdoc/markdoc/src/ast/node.ts
index 284bcf7..a09d061 100644
--- a/node_modules/@markdoc/markdoc/src/ast/node.ts
+++ b/node_modules/@markdoc/markdoc/src/ast/node.ts
@@ -22,6 +22,7 @@ export default class Node implements AstType {
   lines: number[] = [];
   type: NodeType;
   tag?: string;
+  range?: [number, number];
   annotations: AttributeValue[];
 
   inline = false;
diff --git a/node_modules/@markdoc/markdoc/src/formatter.ts b/node_modules/@markdoc/markdoc/src/formatter.ts
index 1cefd77..9b7c8b0 100644
--- a/node_modules/@markdoc/markdoc/src/formatter.ts
+++ b/node_modules/@markdoc/markdoc/src/formatter.ts
@@ -12,8 +12,8 @@ type Options = {
 const SPACE = ' ';
 const SEP = ', '; // Value separator
 const NL = '\n'; //  Newline
-const OL = '1. '; // Ordered list
-const UL = '- '; //  Unordered list
+const OL = '.'; // Ordered list
+const UL = '-'; //  Unordered list
 
 const MAX_TAG_OPENING_WIDTH = 80;
 
@@ -287,10 +287,12 @@ function* formatNode(n: Node, o: Options = {}) {
       break;
     }
     case 'list': {
-      const prefix = n.attributes.ordered ? OL : UL;
+      const prefix = n.attributes.ordered
+        ? `1${n.attributes.marker ?? OL}`
+        : n.attributes.marker ?? UL;
       for (const child of n.children) {
-        const d = format(child, increment(no, prefix.length)).trim();
-        yield NL + indent + prefix + d;
+        const d = format(child, increment(no, prefix.length + 1)).trim();
+        yield NL + indent + prefix + ' ' + d;
       }
       yield NL;
       break;
@@ -353,7 +355,7 @@ function* formatNode(n: Node, o: Options = {}) {
               yield indent + '---';
             }
             for (const d of row) {
-              yield NL + indent + UL + d;
+              yield NL + indent + UL + ' ' + d;
             }
           }
         }
diff --git a/node_modules/@markdoc/markdoc/src/grammar/tag.js b/node_modules/@markdoc/markdoc/src/grammar/tag.js
index f7c26a0..ee8df15 100644
--- a/node_modules/@markdoc/markdoc/src/grammar/tag.js
+++ b/node_modules/@markdoc/markdoc/src/grammar/tag.js
@@ -217,90 +217,121 @@ function peg$parse(input, options) {
         value: primary,
       });
     }
-
     const [type, nesting] = close ? ['tag', 0] : ['tag_open', 1];
-    return { type, nesting, meta: { tag, attributes } };
+    return { type, nesting, meta: { ...tag, attributes } };
   };
   var peg$f4 = function (tag) {
-    return { type: 'tag_close', nesting: -1, meta: { tag } };
+    return { type: 'tag_close', nesting: -1, meta: { ...tag } };
+  };
+  var peg$f5 = function (name) {
+    const loc = location();
+    return { tag: name, range: [loc.start.offset, loc.end.offset] };
   };
-  var peg$f5 = function (head, tail) {
+  var peg$f6 = function (head, tail) {
     return !head ? [] : [head, ...tail];
   };
-  var peg$f6 = function (item) {
+  var peg$f7 = function (item) {
     return item;
   };
-  var peg$f7 = function (ids) {
+  var peg$f8 = function (ids) {
     return ids;
   };
-  var peg$f8 = function (classes) {
+  var peg$f9 = function (classes) {
     return classes;
   };
-  var peg$f9 = function (attribute) {
+  var peg$f10 = function (attribute) {
     return attribute;
   };
-  var peg$f10 = function (name) {
-    return { type: 'class', name, value: true };
+  var peg$f11 = function (name) {
+    const loc = location();
+    return {
+      type: 'class',
+      name,
+      value: true,
+      range: [loc.start.offset, loc.end.offset],
+    };
   };
-  var peg$f11 = function (value) {
-    return { type: 'attribute', name: 'id', value };
+  var peg$f12 = function (value) {
+    const loc = location();
+    return {
+      type: 'attribute',
+      name: 'id',
+      value,
+      range: [loc.start.offset, loc.end.offset],
+    };
   };
-  var peg$f12 = function (name, value) {
-    return { type: 'attribute', name, value };
+  var peg$f13 = function (name, value) {
+    const loc = location();
+    return {
+      type: 'attribute',
+      name,
+      value,
+      range: [loc.start.offset, loc.end.offset],
+    };
   };
-  var peg$f13 = function (name, head, tail) {
+  var peg$f14 = function (name, head, tail) {
     return head ? [head, ...tail] : [];
   };
-  var peg$f14 = function (name, params) {
+  var peg$f15 = function (name, params) {
     let parameters = {};
-    for (let [index, { name, value }] of params.entries())
+    let ranges = {};
+    for (let [index, { name, value, range }] of params.entries()) {
       parameters[name || index] = value;
-    return new Function(name, parameters);
+      ranges[name || index] = range;
+    }
+    const loc = location();
+    return new Function(
+      name,
+      parameters,
+      [loc.start.offset, loc.end.offset],
+      ranges
+    );
   };
-  var peg$f15 = function (name) {
+  var peg$f16 = function (name) {
     return name;
   };
-  var peg$f16 = function (name, value) {
-    return { name, value };
+  var peg$f17 = function (name, value) {
+    const loc = location();
+    return { name, value, range: [loc.start.offset, loc.end.offset] };
   };
-  var peg$f17 = function (value) {
+  var peg$f18 = function (value) {
     return value;
   };
-  var peg$f18 = function (prefix, head, tail) {
+  var peg$f19 = function (prefix, head, tail) {
     if (prefix === '@') return [head, ...tail];
     return new Variable([head, ...tail]);
   };
-  var peg$f19 = function () {
+  var peg$f20 = function () {
     return null;
   };
-  var peg$f20 = function () {
+  var peg$f21 = function () {
     return true;
   };
-  var peg$f21 = function () {
+  var peg$f22 = function () {
     return false;
   };
-  var peg$f22 = function (head, tail) {
+  var peg$f23 = function (head, tail) {
     return [head, ...tail];
   };
-  var peg$f23 = function (value) {
+  var peg$f24 = function (value) {
     return value || [];
   };
-  var peg$f24 = function (head, tail) {
+  var peg$f25 = function (head, tail) {
     return Object.assign(head, ...tail);
   };
-  var peg$f25 = function (value) {
+  var peg$f26 = function (value) {
     return value || {};
   };
-  var peg$f26 = function (key, value) {
+  var peg$f27 = function (key, value) {
     return key === '$$mdtype' ? {} : { [key]: value };
   };
-  var peg$f27 = function () {
+  var peg$f28 = function () {
     return parseFloat(text());
   };
-  var peg$f28 = function (value) {
+  var peg$f29 = function (value) {
     return value.join('');
   };
-  var peg$f29 = function (sequence) {
+  var peg$f30 = function (sequence) {
     return sequence;
   };
 
@@ -670,7 +701,7 @@ function peg$parse(input, options) {
   }
 
   function peg$parseTagName() {
-    var s0;
+    var s0, s1;
 
     var rule$expects = function (expected) {
       if (peg$silentFails === 0) peg$expect(expected);
@@ -678,7 +709,13 @@ function peg$parse(input, options) {
 
     rule$expects(peg$e1);
     peg$silentFails++;
-    s0 = peg$parseIdentifier();
+    s0 = peg$currPos;
+    s1 = peg$parseIdentifier();
+    if (s1 !== peg$FAILED) {
+      peg$savedPos = s0;
+      s1 = peg$f5(s1);
+    }
+    s0 = s1;
     peg$silentFails--;
 
     return s0;
@@ -701,7 +738,7 @@ function peg$parse(input, options) {
         s3 = peg$parseTagAttributesTail();
       }
       peg$savedPos = s0;
-      s0 = peg$f5(s1, s2);
+      s0 = peg$f6(s1, s2);
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
@@ -732,7 +769,7 @@ function peg$parse(input, options) {
       s2 = peg$parseTagAttributesItem();
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f6(s2);
+        s0 = peg$f7(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -756,7 +793,7 @@ function peg$parse(input, options) {
     s1 = peg$parseTagShortcutId();
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
-      s1 = peg$f7(s1);
+      s1 = peg$f8(s1);
     }
     s0 = s1;
     if (s0 === peg$FAILED) {
@@ -764,7 +801,7 @@ function peg$parse(input, options) {
       s1 = peg$parseTagShortcutClass();
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
-        s1 = peg$f8(s1);
+        s1 = peg$f9(s1);
       }
       s0 = s1;
       if (s0 === peg$FAILED) {
@@ -772,7 +809,7 @@ function peg$parse(input, options) {
         s1 = peg$parseTagAttribute();
         if (s1 !== peg$FAILED) {
           peg$savedPos = s0;
-          s1 = peg$f9(s1);
+          s1 = peg$f10(s1);
         }
         s0 = s1;
       }
@@ -801,7 +838,7 @@ function peg$parse(input, options) {
       s2 = peg$parseIdentifier();
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f10(s2);
+        s0 = peg$f11(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -835,7 +872,7 @@ function peg$parse(input, options) {
       s2 = peg$parseIdentifier();
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f11(s2);
+        s0 = peg$f12(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -870,7 +907,7 @@ function peg$parse(input, options) {
         s3 = peg$parseValue();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
-          s0 = peg$f12(s1, s3);
+          s0 = peg$f13(s1, s3);
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
@@ -923,7 +960,7 @@ function peg$parse(input, options) {
           s7 = peg$parseFunctionParameterTail();
         }
         peg$savedPos = s4;
-        s4 = peg$f13(s1, s5, s6);
+        s4 = peg$f14(s1, s5, s6);
         rule$expects(peg$e6);
         if (input.charCodeAt(peg$currPos) === 41) {
           s5 = peg$c5;
@@ -933,7 +970,7 @@ function peg$parse(input, options) {
         }
         if (s5 !== peg$FAILED) {
           peg$savedPos = s0;
-          s0 = peg$f14(s1, s4);
+          s0 = peg$f15(s1, s4);
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
@@ -970,7 +1007,7 @@ function peg$parse(input, options) {
       }
       if (s3 !== peg$FAILED) {
         peg$savedPos = s1;
-        s1 = peg$f15(s2);
+        s1 = peg$f16(s2);
       } else {
         peg$currPos = s1;
         s1 = peg$FAILED;
@@ -985,7 +1022,7 @@ function peg$parse(input, options) {
     s2 = peg$parseValue();
     if (s2 !== peg$FAILED) {
       peg$savedPos = s0;
-      s0 = peg$f16(s1, s2);
+      s0 = peg$f17(s1, s2);
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
@@ -1025,7 +1062,7 @@ function peg$parse(input, options) {
       s4 = peg$parseFunctionParameter();
       if (s4 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f17(s4);
+        s0 = peg$f18(s4);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1099,7 +1136,7 @@ function peg$parse(input, options) {
           s4 = peg$parseVariableTail();
         }
         peg$savedPos = s0;
-        s0 = peg$f18(s1, s2, s3);
+        s0 = peg$f19(s1, s2, s3);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1131,7 +1168,7 @@ function peg$parse(input, options) {
       s2 = peg$parseIdentifier();
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f15(s2);
+        s0 = peg$f16(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1162,7 +1199,7 @@ function peg$parse(input, options) {
           }
           if (s3 !== peg$FAILED) {
             peg$savedPos = s0;
-            s0 = peg$f17(s2);
+            s0 = peg$f18(s2);
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
@@ -1231,7 +1268,7 @@ function peg$parse(input, options) {
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
-      s1 = peg$f19();
+      s1 = peg$f20();
     }
     s0 = s1;
     peg$silentFails--;
@@ -1257,7 +1294,7 @@ function peg$parse(input, options) {
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
-      s1 = peg$f20();
+      s1 = peg$f21();
     }
     s0 = s1;
     if (s0 === peg$FAILED) {
@@ -1270,7 +1307,7 @@ function peg$parse(input, options) {
       }
       if (s1 !== peg$FAILED) {
         peg$savedPos = s0;
-        s1 = peg$f21();
+        s1 = peg$f22();
       }
       s0 = s1;
     }
@@ -1312,7 +1349,7 @@ function peg$parse(input, options) {
         }
         s6 = peg$parseTrailingComma();
         peg$savedPos = s3;
-        s3 = peg$f22(s4, s5);
+        s3 = peg$f23(s4, s5);
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
@@ -1335,7 +1372,7 @@ function peg$parse(input, options) {
       }
       if (s5 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f23(s3);
+        s0 = peg$f24(s3);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1379,7 +1416,7 @@ function peg$parse(input, options) {
       s4 = peg$parseValue();
       if (s4 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f17(s4);
+        s0 = peg$f18(s4);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1425,7 +1462,7 @@ function peg$parse(input, options) {
         }
         s6 = peg$parseTrailingComma();
         peg$savedPos = s3;
-        s3 = peg$f24(s4, s5);
+        s3 = peg$f25(s4, s5);
       } else {
         peg$currPos = s3;
         s3 = peg$FAILED;
@@ -1448,7 +1485,7 @@ function peg$parse(input, options) {
       }
       if (s5 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f25(s3);
+        s0 = peg$f26(s3);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1492,7 +1529,7 @@ function peg$parse(input, options) {
       s4 = peg$parseValueHashItem();
       if (s4 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f6(s4);
+        s0 = peg$f7(s4);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1535,7 +1572,7 @@ function peg$parse(input, options) {
         s4 = peg$parseValue();
         if (s4 !== peg$FAILED) {
           peg$savedPos = s0;
-          s0 = peg$f26(s1, s4);
+          s0 = peg$f27(s1, s4);
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
@@ -1635,7 +1672,7 @@ function peg$parse(input, options) {
         s3 = null;
       }
       peg$savedPos = s0;
-      s0 = peg$f27();
+      s0 = peg$f28();
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
@@ -1676,7 +1713,7 @@ function peg$parse(input, options) {
       }
       if (s3 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f28(s2);
+        s0 = peg$f29(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
@@ -1741,7 +1778,7 @@ function peg$parse(input, options) {
       }
       if (s2 !== peg$FAILED) {
         peg$savedPos = s0;
-        s0 = peg$f29(s2);
+        s0 = peg$f30(s2);
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
diff --git a/node_modules/@markdoc/markdoc/src/grammar/tag.pegjs b/node_modules/@markdoc/markdoc/src/grammar/tag.pegjs
index 4815cd8..bc45a5f 100644
--- a/node_modules/@markdoc/markdoc/src/grammar/tag.pegjs
+++ b/node_modules/@markdoc/markdoc/src/grammar/tag.pegjs
@@ -27,16 +27,18 @@ TagOpen =
       attributes = attributes || [];
       attributes.unshift({type: 'attribute', name: 'primary', value: primary});
     }
-
     const [type, nesting] = close ? ['tag', 0] : ['tag_open', 1];
-  	return {type, nesting, meta: {tag, attributes}};
+  	return {type, nesting, meta: {...tag, attributes}};
   }
   
 TagClose =
-  '/' tag:TagName { return {type: 'tag_close', nesting: -1, meta: {tag}}; }
+  '/' tag:TagName { return {type: 'tag_close', nesting: -1, meta: {...tag}}; }
   
 TagName 'tag name' =
-  name:Identifier
+  name:Identifier {
+    const loc = location()
+  	return {tag: name, range: [ loc.start.offset, loc.end.offset ]}
+  }
 
 TagAttributes =
   head:TagAttributesItem
@@ -55,20 +57,23 @@ TagAttributesItem =
 TagShortcutClass 'class' =
   '.'
   name:Identifier {
-    return {type: 'class', name, value: true};
+  	const loc = location()
+    return {type: 'class', name, value: true, range: [ loc.start.offset, loc.end.offset ]};
   }
 
 TagShortcutId 'id' =
   '#'
   value:Identifier {
-    return {type: 'attribute', name: 'id', value};
+    const loc = location()
+    return {type: 'attribute', name: 'id', value, range: [ loc.start.offset, loc.end.offset ]};
   }
 
 TagAttribute =
   name:Identifier
   '='
   value:Value {
-  	return {type: 'attribute', name, value};
+  	const loc = location()
+  	return {type: 'attribute', name, value, range: [ loc.start.offset, loc.end.offset ]};
   }
 
 Function =
@@ -79,9 +84,13 @@ Function =
   )?
   ')' {
     let parameters = {};
-    for (let [index, {name, value}] of params.entries())
+    let ranges = {}
+    for (let [index, {name, value, range }] of params.entries()) {
       parameters[name || index] = value;
-    return new Function(name, parameters);
+      ranges[name || index] = range
+    }
+    const loc = location()
+    return new Function(name, parameters, [ loc.start.offset, loc.end.offset ], ranges);
   }
 
 FunctionParameter =
@@ -89,7 +98,8 @@ FunctionParameter =
     name:Identifier '=' { return name; }
   )?
   value:Value {
-    return {name, value};
+    const loc = location()
+    return {name, value, range: [ loc.start.offset, loc.end.offset ]};
   }
 
 FunctionParameterTail =
diff --git a/node_modules/@markdoc/markdoc/src/parser.ts b/node_modules/@markdoc/markdoc/src/parser.ts
index c71257d..8be6a9e 100644
--- a/node_modules/@markdoc/markdoc/src/parser.ts
+++ b/node_modules/@markdoc/markdoc/src/parser.ts
@@ -31,7 +31,10 @@ function handleAttrs(token: Token, type: string) {
     case 'heading':
       return { level: Number(token.tag.replace('h', '')) };
     case 'list':
-      return { ordered: token.type.startsWith('ordered') };
+      return {
+        ordered: token.type.startsWith('ordered'),
+        marker: token.markup,
+      };
     case 'link': {
       const attrs = Object.fromEntries(token.attrs);
       return attrs.title
@@ -96,7 +99,7 @@ function handleToken(
 
   const errors = token.errors || [];
   const parent = nodes[nodes.length - 1];
-  const { tag, attributes, error } = token.meta || {};
+  const { tag, attributes, error, range } = token.meta || {};
 
   if (token.type === 'annotation') {
     if (inlineParent) return annotate(inlineParent, attributes);
@@ -113,7 +116,12 @@ function handleToken(
 
   if (typeName === 'error') {
     const { message, location } = error;
-    errors.push({ id: 'parse-error', level: 'critical', message, location });
+    errors.push({
+      id: 'parse-error',
+      level: 'critical',
+      message,
+      location,
+    });
   }
 
   if (token.nesting < 0) {
@@ -135,6 +143,7 @@ function handleToken(
 
   node.errors = errors;
   node.lines = token.map || parent.lines || [];
+  node.range = range;
   node.location = {
     file,
     start: {
diff --git a/node_modules/@markdoc/markdoc/src/schema.ts b/node_modules/@markdoc/markdoc/src/schema.ts
index 2ea3c5c..2e90fff 100644
--- a/node_modules/@markdoc/markdoc/src/schema.ts
+++ b/node_modules/@markdoc/markdoc/src/schema.ts
@@ -101,6 +101,7 @@ export const list: Schema = {
   children: ['item'],
   attributes: {
     ordered: { type: Boolean, render: false, required: true },
+    marker: { type: String, render: false },
   },
   transform(node, config) {
     return new Tag(
diff --git a/node_modules/@markdoc/markdoc/src/tokenizer/plugins/annotations.ts b/node_modules/@markdoc/markdoc/src/tokenizer/plugins/annotations.ts
index 2b2eb1c..712678a 100644
--- a/node_modules/@markdoc/markdoc/src/tokenizer/plugins/annotations.ts
+++ b/node_modules/@markdoc/markdoc/src/tokenizer/plugins/annotations.ts
@@ -17,10 +17,30 @@ function createToken(
   content: string,
   contentStart?: number
 ): Token {
+  const rangeStart = contentStart || 0;
+
   try {
     const { type, meta, nesting = 0 } = parse(content, { Variable, Function });
     const token = state.push(type, '', nesting);
     token.info = content;
+
+    if (meta.attributes && Array.isArray(meta.attributes)) {
+      meta.attributes.forEach((attr: any) => {
+        if (attr.range && Array.isArray(attr.range)) {
+          const [start, end] = attr.range;
+          attr.range = [
+            (start || 0) + rangeStart + 1,
+            (end || 0) + rangeStart + 1,
+          ];
+        }
+      });
+    }
+
+    if (meta.range) {
+      const [start, end] = meta.range;
+      meta.range = [start + rangeStart + 1, end + rangeStart + 1];
+    }
+
     token.meta = meta;
 
     if (!state.delimiters) {
@@ -43,7 +63,19 @@ function createToken(
       : null;
 
     const token = state.push('error', '', 0);
-    token.meta = { error: { message, location } };
+    token.meta = {
+      error: { message, location },
+      range: rangeStart
+        ? [rangeStart + start.offset + 1, rangeStart + end.offset + 1]
+        : null,
+    };
+    if (!rangeStart) {
+      const posStart = state.pos + OPEN.length + start.offset + 1;
+      token.position = {
+        start: posStart,
+        end: posStart + end.offset,
+      };
+    }
     return token;
   }
 }
diff --git a/node_modules/@markdoc/markdoc/src/types.ts b/node_modules/@markdoc/markdoc/src/types.ts
index 0c367b7..1374e14 100644
--- a/node_modules/@markdoc/markdoc/src/types.ts
+++ b/node_modules/@markdoc/markdoc/src/types.ts
@@ -18,6 +18,7 @@ export type AttributeValue = {
   type: string;
   name: string;
   value: any;
+  range?: [number, number];
 };
 
 export type Config = Readonly<ConfigType>;
@@ -131,6 +132,7 @@ export type ValidationError = {
   level: 'debug' | 'info' | 'warning' | 'error' | 'critical';
   message: string;
   location?: Location;
+  range?: [number, number];
 };
 
 export type ValidateError = {
@@ -138,6 +140,7 @@ export type ValidateError = {
   lines: number[];
   location?: Location;
   error: ValidationError;
+  range?: [number, number];
 };
 
 export type ValidationType =
diff --git a/node_modules/@markdoc/markdoc/src/validator.ts b/node_modules/@markdoc/markdoc/src/validator.ts
index 441187d..f1ce041 100644
--- a/node_modules/@markdoc/markdoc/src/validator.ts
+++ b/node_modules/@markdoc/markdoc/src/validator.ts
@@ -160,12 +160,16 @@ export default function validator(node: Node, config: Config) {
 
   for (let [key, value] of Object.entries(node.attributes)) {
     const attrib = attributes[key];
+    const attribRange = node.annotations.find(
+      (annotation) => annotation.name === key
+    )?.range;
 
     if (!attrib) {
       errors.push({
         id: 'attribute-undefined',
         level: 'error',
         message: `Invalid attribute: '${key}'`,
+        range: attribRange,
       });
 
       continue;
@@ -193,6 +197,7 @@ export default function validator(node: Node, config: Config) {
             id: 'variable-undefined',
             level: 'error',
             message: `Undefined variable: '${value.path.join('.')}'`,
+            range: attribRange,
           });
         }
       } else continue;
@@ -207,6 +212,7 @@ export default function validator(node: Node, config: Config) {
           id: 'attribute-type-invalid',
           level: errorLevel || 'error',
           message: `Attribute '${key}' must be type of '${typeToString(type)}'`,
+          range: attribRange,
         });
       }
       if (Array.isArray(valid)) {
@@ -223,6 +229,7 @@ export default function validator(node: Node, config: Config) {
         message: `Attribute '${key}' must match one of ${JSON.stringify(
           matches
         )}. Got '${value}' instead.`,
+        range: attribRange,
       });
 
     if (matches instanceof RegExp && !matches.test(value))
@@ -230,6 +237,7 @@ export default function validator(node: Node, config: Config) {
         id: 'attribute-value-invalid',
         level: errorLevel || 'error',
         message: `Attribute '${key}' must match ${matches}. Got '${value}' instead.`,
+        range: attribRange,
       });
   }
 
